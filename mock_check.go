// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package preflight

import (
	"context"
	"sync"
)

var (
	lockCheckMockCheck sync.RWMutex
	lockCheckMockName  sync.RWMutex
)

// Ensure, that CheckMock does implement Check.
// If this is not the case, regenerate this file with moq.
var _ Check = &CheckMock{}

// CheckMock is a mock implementation of Check.
//
//     func TestSomethingThatUsesCheck(t *testing.T) {
//
//         // make and configure a mocked Check
//         mockedCheck := &CheckMock{
//             CheckFunc: func(ctx context.Context) Result {
// 	               panic("mock out the Check method")
//             },
//             NameFunc: func() string {
// 	               panic("mock out the Name method")
//             },
//         }
//
//         // use mockedCheck in code that requires Check
//         // and then make assertions.
//
//     }
type CheckMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(ctx context.Context) Result

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
}

// Check calls CheckFunc.
func (mock *CheckMock) Check(ctx context.Context) Result {
	if mock.CheckFunc == nil {
		panic("CheckMock.CheckFunc: method is nil but Check.Check was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockCheckMockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	lockCheckMockCheck.Unlock()
	return mock.CheckFunc(ctx)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//     len(mockedCheck.CheckCalls())
func (mock *CheckMock) CheckCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockCheckMockCheck.RLock()
	calls = mock.calls.Check
	lockCheckMockCheck.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *CheckMock) Name() string {
	if mock.NameFunc == nil {
		panic("CheckMock.NameFunc: method is nil but Check.Name was just called")
	}
	callInfo := struct {
	}{}
	lockCheckMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockCheckMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedCheck.NameCalls())
func (mock *CheckMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockCheckMockName.RLock()
	calls = mock.calls.Name
	lockCheckMockName.RUnlock()
	return calls
}
